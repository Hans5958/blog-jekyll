<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://hans5958.github.io/blog/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hans5958.github.io/blog/" rel="alternate" type="text/html"/><updated>2022-07-22T13:23:16+00:00</updated><id>https://hans5958.github.io/blog/feed.xml</id><title type="html">Blog of Hans</title><subtitle>This is a blog.</subtitle><author><name>Hans5958</name></author><entry><title type="html">Welcome to Jekyll!</title><link href="https://hans5958.github.io/blog/2020/07/27/welcome-jekyll" rel="alternate" type="text/html" title="Welcome to Jekyll!"/><published>2020-07-27T08:33:42+00:00</published><updated>2022-07-22T13:19:40+00:00</updated><id>https://hans5958.github.io/blog/2020/07/27/welcome-jekyll</id><content type="html" xml:base="https://hans5958.github.io/blog/2020/07/27/welcome-jekyll"><![CDATA[<p>You’ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p> <p>To add new posts, simply add a file in the <code>_posts</code> directory that follows the convention <code>YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p> <p>Jekyll also offers powerful support for code snippets:</p> <p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Hans5958</name></author><category term="Article"/><category term="en"/><category term="jekyll"/><category term="update"/><summary type="html"><![CDATA[You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Explanation for my presence.ts base on PreMiD</title><link href="https://hans5958.github.io/blog/2020/06/29/explanation-for-my-presence-ts-base-on-premid" rel="alternate" type="text/html" title="Explanation for my presence.ts base on PreMiD"/><published>2020-06-29T09:26:00+00:00</published><updated>2022-07-22T13:19:40+00:00</updated><id>https://hans5958.github.io/blog/2020/06/29/explanation-for-my-presence-ts-base-on-premid</id><content type="html" xml:base="https://hans5958.github.io/blog/2020/06/29/explanation-for-my-presence-ts-base-on-premid"><![CDATA[<p>This was originally written for someone on an open source project, PreMiD, and it was published <a href="https://github.com/Hans5958/PreMiD-Presences-Personal/blob/master/%23%20Docs/explanation-for-base.md">here</a>. Context probably not needed, but if you want, check out <a href="https://github.com/PreMiD/Presences">this repository</a> and check the <code>presence.ts</code> files, and <a href="https://docs.premid.app/en/dev/">this documentation</a>.</p> <hr/> <p>Hello, and welcome to my explanation for my base/template on <code>presence.ts</code>. You might be wondering either how this works or why this thing complicated. In this explanation text, I will guide you how I came with the base that I made, and consequently, solve this systematic problem that a lot of developers do, as I could say.</p> <p>Now, keep in mind, the problem is not quite a big deal, as the overhead will be small (in fact, it could be tiny), but I just wanted to see if I could make an optimized code, because I wanted to avoid having those small overhead makes my poor laptop laggy, and because I genuinely bored and wanted to do something.</p> <h2 id="initial-problem">Initial problem</h2> <p>So, as I said, there’s a “systematic” problem on some <code>presence.ts</code> that a lot of developers made. But, to know the problem, we need to see how the aforementioned developers did it.</p> <p>Here’s the “average” base that some developers do on <code>presence.ts</code>. Let’s assume that we’re only checking two pages.</p> <ol> <li>A dynamic page, which includes a video, and when changing into a new video, the page won’t reload, but the contents and the URL changed.</li> <li>A static page, which includes a login page.</li> </ol> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">presence</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Presence</span><span class="p">({</span>
	<span class="na">clientId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">000000000000000000</span><span class="dl">"</span><span class="p">,</span>
<span class="p">})</span>

<span class="kd">var</span> <span class="nx">browsingStamp</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>

<span class="nx">presence</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">UpdateData</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	
	<span class="kd">var</span> <span class="na">presenceData</span><span class="p">:</span> <span class="nx">presenceData</span> <span class="o">=</span> <span class="p">{</span>
			<span class="na">details</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Viewing an unsupported page</span><span class="dl">"</span><span class="p">,</span>
			<span class="na">state</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="kc">undefined</span><span class="p">,</span>
			<span class="na">largeImageKey</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">lg</span><span class="dl">"</span><span class="p">,</span>
			<span class="na">startTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="nx">browsingStamp</span><span class="p">,</span>
			<span class="na">endTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="kc">undefined</span>
		<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="c1">// it is a dynamic page) {</span>
		<span class="nx">presenceData</span><span class="p">.</span><span class="nx">details</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Viewing a video</span><span class="dl">"</span>
		<span class="nx">presenceData</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getQuerySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.videoTitle</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="c1">// it is a static page) {</span>
		<span class="nx">presenceData</span><span class="p">.</span><span class="nx">details</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Logging in</span><span class="dl">"</span>
	<span class="p">}</span> <span class="c1">// and so on...</span>

<span class="p">})</span>

</code></pre></div></div> <p>Now, there are some problems. The <code>presenceData</code> keeps being declared/resetted.</p> <p>This is fine for the dynamic page, because having the script overwrites the old <code>presenceData</code> values is not a good idea, but it’s not fine for the static page, because it needs to set the <code>presenceData</code> value, even nothing has changed.</p> <p>There must be a way so only the dynamic page script runs every time, but not the static page script.</p> <p>That being said, we need to make a “handler” that does two different script, for the static pages and for the dynamic pages. Also, the “handler” needs to know if the script is for the dynamic pages or not. Hence, another “handler”.</p> <h2 id="part-1-the-update-function-handler">Part 1: The Update Function Handler</h2> <p>Firstly, we need to make a handler for functions that needs to run recursively. Perfect for dynamic pages that needs to do something more than once.</p> <p>Here’s the handler that I come with. It’s not exactly a callback, but that’s what I made few months ago.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">updateCallback</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">_function</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
	<span class="kd">get</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_function</span><span class="p">;</span>
	<span class="p">},</span>
	<span class="kd">set</span> <span class="kd">function</span><span class="p">(</span><span class="nx">parameter</span><span class="p">){</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_function</span> <span class="o">=</span> <span class="nx">parameter</span>
	<span class="p">},</span>
	<span class="kd">get</span> <span class="nx">present</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_function</span> <span class="o">!==</span> <span class="kc">null</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>This handler does three things.</p> <ol> <li><code>updateCallback.function = () =&gt; {}</code> sets the function to be updated recursively</li> <li><code>updateCallback.function()</code> executes the defined function.</li> <li><code>updateCallback.present()</code> returns a boolean if there is a update function that defined. This is to differentiate the dynamic pages and the static pages.</li> </ol> <p>On the main script, let’s put our dynamic function into the handler.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="c1">// it is a dynamic page) {</span>
	<span class="nx">updateCallback</span><span class="p">.</span><span class="kd">function</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">presenceData</span><span class="p">.</span><span class="nx">details</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Viewing a video</span><span class="dl">"</span>
		<span class="nx">presenceData</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getQuerySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.videoTitle</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span>
	<span class="p">}</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="c1">// it is a static page) {</span>
	<span class="nx">presenceData</span><span class="p">.</span><span class="nx">details</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Logging in</span><span class="dl">"</span>
<span class="p">}</span> <span class="c1">// and so on...</span>
</code></pre></div></div> <p>All set, now let’s move into the the second part.</p> <h2 id="part-2-handler-for-codepresenceonquotupdatedataquotcode">Part 2: Handler for <code>presence.on(&quot;UpdateData&quot;)</code></h2> <p>Next, let’s make the handler that runs recursively for every moment PreMiD asks for a data update.</p> <p>Here’s what I come up with.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">updateCallback</span><span class="p">.</span><span class="nx">present</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">presence</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">UpdateData</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">currentURL</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">),</span>
		<span class="nx">currentPath</span> <span class="o">=</span> <span class="nx">currentURL</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">),</span>
		<span class="nx">presenceData</span> <span class="o">=</span> <span class="p">{</span>
			<span class="na">details</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Viewing an unsupported page</span><span class="dl">"</span><span class="p">,</span>
			<span class="na">state</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="kc">undefined</span><span class="p">,</span>
			<span class="na">largeImageKey</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">lg</span><span class="dl">"</span><span class="p">,</span>
			<span class="na">startTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="nx">browsingStamp</span><span class="p">,</span>
			<span class="na">endTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="kc">undefined</span>
		<span class="p">};</span>
		<span class="nx">updateCallback</span><span class="p">.</span><span class="kd">function</span><span class="p">()</span>
		<span class="nx">presence</span><span class="p">.</span><span class="nx">setActivity</span><span class="p">(</span><span class="nx">presenceData</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="nx">presence</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">UpdateData</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">presence</span><span class="p">.</span><span class="nx">setActivity</span><span class="p">(</span><span class="nx">presenceData</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div> <p>The way this handler works is as follows.</p> <ol> <li>If the update function is present, which is going to be true if it’s a dynamic page, reset <code>presenceData</code> values and some others, run the update function (which writes the new values to the resetted <code>presenceData</code>), and finally set the activity using the updated <code>presenceData</code> values.</li> <li>If it returns false, which is for the static pages, just set activity to the already configured <code>presenceData</code> values every single time.</li> </ol> <p>Now, I could do that as it is, but I will seperate the lines that related to resetting values into a single function, <code>resetData()</code>.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">updateCallback</span><span class="p">.</span><span class="nx">present</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">presence</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">UpdateData</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">resetData</span><span class="p">()</span>
		<span class="nx">updateCallback</span><span class="p">.</span><span class="kd">function</span><span class="p">()</span>
		<span class="nx">presence</span><span class="p">.</span><span class="nx">setActivity</span><span class="p">(</span><span class="nx">presenceData</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="nx">presence</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">UpdateData</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">presence</span><span class="p">.</span><span class="nx">setActivity</span><span class="p">(</span><span class="nx">presenceData</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">resetData</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">currentURL</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">),</span>
	<span class="nx">currentPath</span> <span class="o">=</span> <span class="nx">currentURL</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">),</span>
	<span class="nx">presenceData</span> <span class="o">=</span> <span class="p">{</span>
		<span class="na">details</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Viewing an unsupported page</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">state</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="kc">undefined</span><span class="p">,</span>
		<span class="na">largeImageKey</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">lg</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">startTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="nx">browsingStamp</span><span class="p">,</span>
		<span class="na">endTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="kc">undefined</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="finish-it-up">Finish it up</h2> <p>After having both handlers, let’s merge both of them into our <code>presence.ts</code> template. Note that I put declared <code>presenceData</code> once, on the top.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">presence</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Presence</span><span class="p">({</span>
	<span class="na">clientId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">000000000000000000</span><span class="dl">"</span><span class="p">,</span>
<span class="p">})</span>

<span class="kd">var</span> <span class="nx">presenceData</span><span class="p">:</span> <span class="nx">presenceData</span> <span class="o">=</span> <span class="p">{</span>
		<span class="na">details</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Viewing an unsupported page</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">state</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="kc">undefined</span><span class="p">,</span>
		<span class="na">largeImageKey</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">lg</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">startTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="nx">browsingStamp</span><span class="p">,</span>
		<span class="na">endTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="kc">undefined</span>
	<span class="p">},</span>
	<span class="nx">updateCallback</span> <span class="o">=</span> <span class="p">{</span>
		<span class="na">_function</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
		<span class="kd">get</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_function</span><span class="p">;</span>
		<span class="p">},</span>
		<span class="kd">set</span> <span class="kd">function</span><span class="p">(</span><span class="nx">parameter</span><span class="p">){</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_function</span> <span class="o">=</span> <span class="nx">parameter</span>
		<span class="p">},</span>
		<span class="kd">get</span> <span class="nx">present</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_function</span> <span class="o">!==</span> <span class="kc">null</span>
		<span class="p">}</span>
	<span class="p">};</span>

<span class="k">if</span> <span class="p">(</span><span class="c1">// it is a dynamic page) {</span>
	<span class="nx">updateCallback</span><span class="p">.</span><span class="kd">function</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">presenceData</span><span class="p">.</span><span class="nx">details</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Viewing a video</span><span class="dl">"</span>
		<span class="nx">presenceData</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getQuerySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.videoTitle</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span>
	<span class="p">}</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="c1">// it is a static page) {</span>
	<span class="nx">presenceData</span><span class="p">.</span><span class="nx">details</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Logging in</span><span class="dl">"</span>
<span class="p">}</span> <span class="c1">// and so on...</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">updateCallback</span><span class="p">.</span><span class="nx">present</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">presence</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">UpdateData</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">resetData</span><span class="p">()</span>
		<span class="nx">updateCallback</span><span class="p">.</span><span class="kd">function</span><span class="p">()</span>
		<span class="nx">presence</span><span class="p">.</span><span class="nx">setActivity</span><span class="p">(</span><span class="nx">presenceData</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="nx">presence</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">UpdateData</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">presence</span><span class="p">.</span><span class="nx">setActivity</span><span class="p">(</span><span class="nx">presenceData</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">resetData</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">currentURL</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">),</span>
	<span class="nx">currentPath</span> <span class="o">=</span> <span class="nx">currentURL</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">),</span>
	<span class="nx">presenceData</span> <span class="o">=</span> <span class="p">{</span>
		<span class="na">details</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Viewing an unsupported page</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">state</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="kc">undefined</span><span class="p">,</span>
		<span class="na">largeImageKey</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">lg</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">startTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="nx">browsingStamp</span><span class="p">,</span>
		<span class="na">endTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="kc">undefined</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>As we can see, the problems that we found has been solved. The <code>presenceData</code> values is being resetted the only time that we need (which is for dynamic pages), and the static page script only run once and the handler <em>handles</em> the rest, by setting the same values again and again.</p> <p>Tidy up some things, such as adding some variables such as <code>currentURL</code> and <code>currentPath</code>, informations regarding to our functions, here’s the final template.</p> <div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">presence</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Presence</span><span class="p">({</span>
	<span class="na">clientId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">000000000000000000</span><span class="dl">"</span><span class="p">,</span>
<span class="p">})</span>

<span class="kd">var</span> <span class="nx">currentURL</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">),</span>
	<span class="nx">currentPath</span> <span class="o">=</span> <span class="nx">currentURL</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">),</span>
	<span class="nx">browsingStamp</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">),</span> 
	<span class="nx">presenceData</span><span class="p">:</span> <span class="nx">presenceData</span> <span class="o">=</span> <span class="p">{</span>
		<span class="na">details</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Viewing an unsupported page</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">state</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="kc">undefined</span><span class="p">,</span>
		<span class="na">largeImageKey</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">lg</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">startTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="nx">browsingStamp</span><span class="p">,</span>
		<span class="na">endTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="kc">undefined</span>
	<span class="p">},</span>
	<span class="nx">updateCallback</span> <span class="o">=</span> <span class="p">{</span>
		<span class="na">_function</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
		<span class="kd">get</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_function</span><span class="p">;</span>
		<span class="p">},</span>
		<span class="kd">set</span> <span class="kd">function</span><span class="p">(</span><span class="nx">parameter</span><span class="p">){</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_function</span> <span class="o">=</span> <span class="nx">parameter</span>
		<span class="p">},</span>
		<span class="kd">get</span> <span class="nx">present</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_function</span> <span class="o">!==</span> <span class="kc">null</span>
		<span class="p">}</span>
	<span class="p">};</span>

<span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> 

	<span class="k">if</span> <span class="p">(</span><span class="c1">// it is a dynamic page) {</span>
		<span class="nx">updateCallback</span><span class="p">.</span><span class="kd">function</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="nx">presenceData</span><span class="p">.</span><span class="nx">details</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Viewing a video</span><span class="dl">"</span>
			<span class="nx">presenceData</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getQuerySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.videoTitle</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span>
		<span class="p">}</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="c1">// it is a static page) {</span>
		<span class="nx">presenceData</span><span class="p">.</span><span class="nx">details</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Logging in</span><span class="dl">"</span>
	<span class="p">}</span> <span class="c1">// and so on...</span>

<span class="p">})()</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">updateCallback</span><span class="p">.</span><span class="nx">present</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">presence</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">UpdateData</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">resetData</span><span class="p">()</span>
		<span class="nx">updateCallback</span><span class="p">.</span><span class="kd">function</span><span class="p">()</span>
		<span class="nx">presence</span><span class="p">.</span><span class="nx">setActivity</span><span class="p">(</span><span class="nx">presenceData</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="nx">presence</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">UpdateData</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
		<span class="nx">presence</span><span class="p">.</span><span class="nx">setActivity</span><span class="p">(</span><span class="nx">presenceData</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="cm">/**
 * Initialize/reset presenceData.
 */</span>
<span class="kd">function</span> <span class="nx">resetData</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">currentURL</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">),</span>
	<span class="nx">currentPath</span> <span class="o">=</span> <span class="nx">currentURL</span><span class="p">.</span><span class="nx">pathname</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">),</span>
	<span class="nx">presenceData</span> <span class="o">=</span> <span class="p">{</span>
		<span class="na">details</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">Viewing an unsupported page</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">state</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="kc">undefined</span><span class="p">,</span>
		<span class="na">largeImageKey</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="dl">"</span><span class="s2">lg</span><span class="dl">"</span><span class="p">,</span>
		<span class="na">startTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="nx">browsingStamp</span><span class="p">,</span>
		<span class="na">endTimestamp</span><span class="p">:</span> <span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="kc">undefined</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>So, there we have it. that’s how I made my base/template script, that is optimized and systematically made. Hope you can learn something related to coding, especially optimizing code, or problem solving in general.</p>]]></content><author><name>Hans5958</name></author><category term="Article"/><category term="en"/><category term="programming"/><summary type="html"><![CDATA[Hello, and welcome to my explanation for my base/template on ``presence.ts``. You might be wondering either how this works or why this thing complicated. In this explanation text, I will guide you how I came with the base that I made, and consequently, solve this systematic problem that a lot of developers do, as I could say.]]></summary></entry><entry><title type="html">Scavenger Hunt Writeups - ChillZone, June 2019</title><link href="https://hans5958.github.io/blog/2019/06/25/scavenger-hunt-writeups-1" rel="alternate" type="text/html" title="Scavenger Hunt Writeups - ChillZone, June 2019"/><published>2019-06-25T13:08:41+00:00</published><updated>2022-07-22T13:19:40+00:00</updated><id>https://hans5958.github.io/blog/2019/06/25/scavenger-hunt-writeups-1</id><content type="html" xml:base="https://hans5958.github.io/blog/2019/06/25/scavenger-hunt-writeups-1"><![CDATA[<p>Hey, I decided to start a series of post. I call this series “Scavenger Hunt Writeups”. I do this because I’m bored and I like scavenger hunts. This includes those mini-ARG that hosted by some random Discord server. I will do this in a relaxing tone, not as technical as when someone found a critical zero-day exploit. This is the first post, hope you like it. This scavenger hunt is hosted by ChillZone (<a href="http://discord.gg/fun">discord.gg/fun</a>), a populated server which I’ve never talked to. As a popular server, they like events, this is one of them. This one is quite easy, surprisingly. So, let’s get into it.</p> <hr/> <h1 id="stage-1">Stage 1</h1> <p>This one is easy. I just copied the ID of the owner from the announcement channel.</p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/02.png" alt="scavenger-hunt-writeups-1-02.png"/></p> <p>The answer is <strong>170624640308346880</strong>. (.170624640308346880)</p> <hr/> <h1 id="stage-2">Stage 2</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/03.png" alt="scavenger-hunt-writeups-1-03.png"/></p> <p>This one is also easy. Just google “pi” and you get your answer. The first “3” is also counted, by the way. The answer is <strong>3.141592653</strong>. (3.141592653)</p> <hr/> <h1 id="stage-3">Stage 3</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/04.png" alt="scavenger-hunt-writeups-1-04.png"/></p> <p>This one is also easy. The numbers are the squared value of the index. So, the first number (n = 1) is 12 = 1, the second number (n = 2) is 22 = 4, the third number (n = 3) is 32 = 9, and so on. So, for the n-th number, the value is n2. For some reason, the creator of this stage has a different approach. <em>“The difference between 1 and 4 is 3, the difference between 4 and 9 is 5, the difference between 9 and 16 is 7. The number increases by 2 and is added onto the last number.”</em> But, anyway. We got the same answer. The sixth number is 62 = 36, so the answer is <strong>36</strong>. (.36)</p> <hr/> <h1 id="stage-4">Stage 4</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/05.png" alt="scavenger-hunt-writeups-1-05.png"/></p> <p>So, it refers to a channel on the Discord server about talking good. The channel that it refers to is “#compliment-above”. In the topic channel, you can get the answer.</p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/06.png" alt="scavenger-hunt-writeups-1-06.png"/></p> <p>So, the answer is <strong>friend</strong>. (.friend)</p> <hr/> <h1 id="stage-5">Stage 5</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/07.png" alt="scavenger-hunt-writeups-1-07.png"/></p> <p>In this one, there are multiple polygons. But, you can see that the green polygon always inside the red polygon and the red polygon is always inside the blue polygon. So, the order of the color is green, red, and blue. There are letters scattered on the polygons. The letters can be categorized by the colors. Reading the letters from left to right and top to bottom results in this.</p> <p>Green: CODE Red: IS Blue: 359</p> <p>As you can see, it reads “CODE IS 359”. So, the answer is <strong>359</strong>. (.359)</p> <hr/> <h1 id="stage-6">Stage 6</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/08.png" alt="scavenger-hunt-writeups-1-08.png"/></p> <p>This is a trivia question. But, searching the messages on the ChillZone server yields this message.</p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/09.png" alt="scavenger-hunt-writeups-1-09.png"/></p> <p>Then, his Discord username is zam#6918</p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/10.png" alt="scavenger-hunt-writeups-1-10.png"/></p> <p>So, the answer is <strong>zam</strong>. (.zam)</p> <hr/> <h1 id="stage-7">Stage 7</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/11.png" alt="scavenger-hunt-writeups-1-11.png"/></p> <p>Here’s the word grid in text.</p> <pre><code>MDHNVDYCWD
WVOLDXQIHX
TETNTZFETR
SZWCTGRAAL
HXNOAERTRR
DMJHQAWVBC
WTGVPAGRVH
VABRDKFQCC
LLFSFLQOYC
PKKMIMCHKW
</code></pre> <p>Using an external tool (because I’m lazy), we can find some words.</p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/12.png" alt="scavenger-hunt-writeups-1-12.png"/></p> <p>The most likely words that are used is “don’t”, “here”, and “talk”. By putting these words in order to form a sentence, the answer can be found. It is <strong>don’t talk here</strong>. (.donttalkhere)</p> <hr/> <h1 id="stage-8">Stage 8</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/13.png" alt="scavenger-hunt-writeups-1-13.png"/></p> <p>Here’s the YouTube link. <a href="https://youtube.com/watch?v=Ba7HpvKJjF0">https://youtube.com/watch?v=Ba7HpvKJjF0</a> This one is easy. The video only contains an audio track. The audio is played backward. Play the audio backward and you can hear “ModSloth likes cheese”. So, the answer is <strong>ModSloth likes cheese</strong>. (.modslothlikescheese)</p> <hr/> <h1 id="stage-9">Stage 9</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/14.png" alt="scavenger-hunt-writeups-1-14.png"/></p> <p>This trivia question is easy. I just searched the script portion and Google tells me the movie.</p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/15.png" alt="scavenger-hunt-writeups-1-15.png"/></p> <p>The search results refer to The Thing, a sci-fi movie from 1982. So, the answer is <strong>The Thing</strong> (.thething)</p> <hr/> <h1 id="stage-10">Stage 10</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/16.png" alt="scavenger-hunt-writeups-1-16.png"/></p> <p>This one is actually easy, although I actually overlooked the question. There is a confession channel where we can submit our confessions anonymously. So, the question told us to find his confession. I actually skimmed the whole channel to find the answer. Also, I got a clue that the answer has 4 words, but it turns out that the answer has 4 characters.</p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/17.png" alt="scavenger-hunt-writeups-1-17.png"/></p> <p>Anyway, after skimming probably hundreds of confession, I found the answer. The answer is <strong>eggs</strong>. (.eggs)</p> <hr/> <h1 id="stage-11">Stage 11</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/18.png" alt="scavenger-hunt-writeups-1-18.png"/></p> <p>Same as the tenth stage, I just googled the lyrics of the song.</p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/19.png" alt="scavenger-hunt-writeups-1-19.png"/></p> <p>The answer is <strong>Lazarus</strong>. (.lazarus)</p> <hr/> <h1 id="stage-12">Stage 12</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/20.png" alt="scavenger-hunt-writeups-1-20.png"/></p> <p>Alright, this is the hardest question among all the stages on the scavenger hunt. Even the final stage is easier than this one. Lots of people cheated, though, but I figured it out by myself. The picture actually resembles the seven segment display that you see in clocks or such. To solve it, just invert the segments, so the active segment becomes inactive and vice versa.</p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/21.png" alt="scavenger-hunt-writeups-1-21.png"/></p> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/22-1.png" alt="scavenger-hunt-writeups-1-22.png"/></p> <p>So, the answer is <strong>503</strong> (.503). The clue confirms the answer since the third letter of the alphabet is C.</p> <hr/> <h1 id="final-stage">Final Stage</h1> <p><img src="/blog/assets/img/scavenger-hunt-writeups-1/23.png" alt="scavenger-hunt-writeups-1-23.png"/></p> <p>The final stage! So, we need to find a question to solve this stage. On my way to this stage, I also looked at the channel topics and surely it hides something. There are spoilers that contain words. Those words can be arranged into a question.</p> <p>So, the question is “How many self-assignable roles do we have currently on the server?” As of the time of writing, there are 64 unique self-assignable roles spread into 3 categories.</p> <ul> <li>Velvet</li> <li>Maroon</li> <li>Red</li> <li>Halloween Orange</li> <li>Orange</li> <li>Sand</li> <li>Camel</li> <li>Brown</li> <li>Sunshine Yellow</li> <li>Yellow</li> <li>Lime Green</li> <li>Neon Green</li> <li>Tree Green</li> <li>Green</li> <li>Starbucks Green</li> <li>Skobeloff</li> <li>Teal</li> <li>Turquoise</li> <li>Blizzard Blue</li> <li>Mint</li> <li>Discord Color</li> <li>Light Blue</li> <li>Blue</li> <li>Sky Blue</li> <li>Picasso Blue</li> <li>Dark Blue</li> <li>Navy</li> <li>Indigo</li> <li>Bubble Gum</li> <li>Pink</li> <li>Unknown Color</li> <li>Magenta</li> <li>Fuchsia</li> <li>Lavender</li> <li>Tinted Lavender</li> <li>Bright Purple</li> <li>Purple</li> <li>Dark Purple</li> <li>Grey</li> <li>White</li> <li>Dark Grey</li> <li>Black</li> <li>Male</li> <li>Female</li> <li>Non-Binary</li> <li>Asia</li> <li>Europe</li> <li>Americas</li> <li>Oceania</li> <li>Africa</li> <li>Android</li> <li>Apple</li> <li>Introvert</li> <li>Extrovert</li> <li>Instagram</li> <li>Twitter</li> <li>Netflix</li> <li>YouTube</li> <li>Reddit</li> <li>Fortnite</li> <li>PUBG</li> <li>Updates</li> <li>Giveaway Reminders</li> <li>Events</li> </ul> <p>So, the answer is <strong>64</strong>. (.64)</p>]]></content><author><name>Hans5958</name></author><category term="Article"/><category term="en"/><summary type="html"><![CDATA[Hey, I decided to start a series of post. I call this series “Scavenger Hunt Writeups”. I do this because I’m bored and I like scavenger hunts. This includes those mini-ARG that hosted by some random Discord server. I will do this in a relaxing tone, not as technical as when someone found a critical zero-day exploit. This is the first post, hope you like it. This scavenger hunt is hosted by ChillZone (discord.gg/fun), a populated server which I’ve never talked to. As a popular server, they like events, this is one of them. This one is quite easy, surprisingly. So, let’s get into it.]]></summary></entry><entry><title type="html">Cracking the mystery of Minecraft HD Heads, alone</title><link href="https://hans5958.github.io/blog/2018/08/20/minecraft-hd-heads" rel="alternate" type="text/html" title="Cracking the mystery of Minecraft HD Heads, alone"/><published>2018-08-20T13:33:50+00:00</published><updated>2022-07-22T13:19:40+00:00</updated><id>https://hans5958.github.io/blog/2018/08/20/minecraft-hd-heads</id><content type="html" xml:base="https://hans5958.github.io/blog/2018/08/20/minecraft-hd-heads"><![CDATA[<p>So, my friend has successfully invented the so-called Minecraft HD Heads. It’s just a simple Minecraft head, but the quality is upscaled, that it’s not like “pixelated” anymore. He tells that he could give the steps to do to get it, but I want to try to do it by myself, without any help. I want this as a challenge, something to fill my boredom.</p> <p>Actually, I don’t want to reverse-engineer the head, but because of difficulties, I need to.</p> <h2 id="clues">Clues</h2> <p>So, here’s what do we know.</p> <ol> <li>You need <a href="http://optifine.net">OptiFine</a> to make it work. It must something to do with the HD textures compatibility. Since you don’t need to install anything to use an HD Texture (like <a href="https://bdcraft.net/">BDCraft</a>)</li> <li>It also uses the same skin format. It uses the 64x64 size for the skin, but there must be some workarounds.</li> <li>You can make any size of your head. My friend tells me that he want’s to try a bigger image, so let’s assume that you could make it in any size, at least in an exponential. (64x64, 128x128, 256x256, and so on)</li> </ol> <p>My hypothesis is you need to upscale the default skin and you can edit it with <a href="https://www.getpaint.net/">Paint.NET</a> or whatever (Not <a href="https://en.wikipedia.org/wiki/Microsoft_Paint">Microsoft Paint</a>. It doesn’t support transparency), but my friend told me that it won’t work, but I’ll just try it anyway.</p> <p>One thing to note that in a <a href="http://youtube.com/phnixhamstasc">Phoenix SC</a> live stream, he successfully do a Shrek head on a Giant by just upscale the Zombie skin and then place the Shrek at the head. He also does a bowling pin and a text on the shirt.</p> <h2 id="first-part-the-head">First part: The head</h2> <p>So, let’s try to see how OptiFine HD texture works. Well, you just make your texture in any size, and OptiFine will do its job. Well, it is simple, really. Let’s try it.</p> <p>Here, I have a Twitter logo that I put at the head. I upscaled the texture from 64x64 to 1024x1024.</p> <p><img src="/blog/assets/img/minecraft-hd-heads/1.png" alt="hdheads-1.png"/>%20%0A%0AThen,%20I%20put%20it%20on%20my%20resource%20pack,%20and,%20as%20I%20expected,%20it%20works.%20%0A%0A!%5Bhdheads-2.png%5D(/assets/img/minecraft-hd-heads/2.png)</p> <p>So, this part is simple, you upscale the skin, put the image, and then voila.</p> <h2 id="second-part-make-it-online-and-set-the-head">Second part: Make it online and set the head</h2> <p>This is hard to figure this part out.</p> <p>At first, I thought that the skin is outside the minecraft.net domain. So, I tried to upload on <a href="http://cubeupload.com">cubeupload.com</a> and try a skin on <a href="http://planetminecraft.com">Planet Minecraft</a>. That didn’t work.</p> <p>Then, I use the Minecraft uploader to upload my skin, and then do some things to complete the whole process. That didn’t work, even I use that technique where you could use a skin from another website using the skin’s URL.</p> <p>After lots of despair, I finally looked at the HD Head, and I found the way. It actually uses the <a href="http://education.minecraft.net">Minecraft: Education Edition</a> website, that is under the minecraft.net domain.</p> <p><img src="/blog/assets/img/minecraft-hd-heads/3.png" alt="hdheads-3.PNG"/>%20%0A%0AAfter%20some%20clicky-clicks%20in%20here%20and%20there,%20I%20finally%20get%20the%20skin%20there%20and%20use%20it%20for%20the%20skin,%20and%20changed%20the%20URL%20into%20mine.%20%0A%0A!%5Bhdheads-4.png%5D(/assets/img/minecraft-hd-heads/4.png)%20%0A%0AOn%20NBTExplorer,%20I%20changed%20the%20texture%20using%20the%20base64%20that’s%20generated,%20and%20then%20changed%20the%20UUID%20into%20something%20else.%20%0A%0A!%5Bhdheads-5.png%5D(/assets/img/minecraft-hd-heads/5.png)%20%0A%0AOkay,%20testing%20time.%20Ah,%20it%20works!%20Finally!%20Oh%20yeah,%20I%20uploaded%20the%20bigger%20version.%20%0A%0A!%5Bhdheads-6.png%5D(/assets/img/minecraft-hd-heads/6.png)</p> <h2 id="final-words">Final Words</h2> <p>So, that’s how I crack the mystery of the Minecraft HD Heads. It is possible and fairly easy. The matter that makes my finding hard that the workaround that my friend use that is under his sleeves. Anyway, that’s for this post and goodbye.</p>]]></content><author><name>Hans5958</name></author><category term="Article"/><category term="en"/><summary type="html"><![CDATA[So, my friend has successfully invented the so-called Minecraft HD Heads. It’s just a simple Minecraft head, but the quality is upscaled, that it’s not like “pixelated” anymore. He tells that he could give the steps to do to get it, but I want to try to do it by myself, without any help. I want this as a challenge, something to fill my boredom.]]></summary></entry><entry><title type="html">Google Assistant’s The Riddle Doors Answers</title><link href="https://hans5958.github.io/blog/2018/07/02/google-assistants-the-riddle-doors-answers" rel="alternate" type="text/html" title="Google Assistant’s The Riddle Doors Answers"/><published>2018-07-02T17:00:10+00:00</published><updated>2022-07-22T13:19:40+00:00</updated><id>https://hans5958.github.io/blog/2018/07/02/google-assistants-the-riddle-doors-answers</id><content type="html" xml:base="https://hans5958.github.io/blog/2018/07/02/google-assistants-the-riddle-doors-answers"><![CDATA[<p>Here’s a filler content, if you know what I mean. If you ask Google Assistant to tell a riddle, you will be playing the game called “The Riddle Doors”. The game consist of 12 riddles, each having it’s own storyboard. After the game ends, the game will loop. If you exit in the middle of the game, your progress will be saved. Here are the question that are asked.</p> <p>Q: Welcome you in or keep you away, I could really swing either way. What am I?<br/> A: A door.</p> <p>Q: If you have one, you don’t share it. If you share it, you don’t have it. What is it?<br/> A: A secret.</p> <p>Q: What comes down but never goes up?<br/> A: A rain.</p> <p>Q: What can run, but never walks, has a mouth, but never talks, has a head, but never weeps, and has a bed, but never sleeps?<br/> A: A river.</p> <p>Q: What do you throw out when you want to use it and take in when you don’t?<br/> A: An anchor.</p> <p>Q: What always leaves, always stays, and when the wind is blowing it sometimes sways?<br/> A: A tree.</p> <p>Q: The more there is of me, the less you see. What am I?<br/> A: The darkness.</p> <p>Q: What lives in the winter, dies in the heat, and comes to a point where it drips on the street?<br/> A: An icicle.</p> <p>Q: What can be caught but not thrown, even when a nose is blown?<br/> A: A cold.</p> <p>Q: What is easy to get into, but hard to get out of?<br/> A: A trouble.</p> <p>Q: What has hands and lots of rings, but can’t clap?<br/> A: An alarm clock.</p> <p>Q: What’s always lumpy and wet, but gets sharper the more you use it?<br/> A: A brain.</p>]]></content><author><name>Hans5958</name></author><category term="Article"/><category term="en"/><summary type="html"><![CDATA[Here’s a filler content, if you know what I mean. If you ask Google Assistant to tell a riddle, you will be playing the game called “The Riddle Doors”. The game consist of 12 riddles, each having it’s own storyboard. After the game ends, the game will loop. If you exit in the middle of the game, your progress will be saved. Here are the question that are asked.]]></summary></entry><entry><title type="html">How I accidentally become famous on a Minecraft server</title><link href="https://hans5958.github.io/blog/2018/06/20/how-i-accidentally-become-famous-on-a-minecraft-server" rel="alternate" type="text/html" title="How I accidentally become famous on a Minecraft server"/><published>2018-06-20T14:31:09+00:00</published><updated>2022-07-22T13:19:40+00:00</updated><id>https://hans5958.github.io/blog/2018/06/20/how-i-accidentally-become-famous-on-a-minecraft-server</id><content type="html" xml:base="https://hans5958.github.io/blog/2018/06/20/how-i-accidentally-become-famous-on-a-minecraft-server"><![CDATA[<p>Hello everyone. It’s been a while since my last post. Let me tell you my story of how I accidentally become famous on a Minecraft server.</p> <p>I was famous on a cracked server called Cosmic Craft, more exact, it’s creative part. It was a free server that still gets 5000 players daily, most of them are from South East Asia, more precisely, from the Philippines. On that day, I don’t have a premium and I bought a donator rank on there for $3.50.</p> <p>One day, I saw an item that has a lot of enchantments. It was a famous item at the time. It was special that nobody can create such one. Wurst, a hacking client for Minecraft, is also famous because you could rename items with a colored name.</p> <p>After that, I discovered a command on Wurst that could replicate the command “/give” in creative, even you don’t have access on that command. I tried to play with it to create items with enchantments and such, and it works. So, I put my item on my plot, advertised it, and everybody went on it. Everybody also asked me how do I do it, so I created a guidebook about it.</p> <p>After that, I thought myself to make a museum of my items that I created, and then I decided to make a gallery, where I put all my items on there. After that, my popularity rose, a lot of players know me and even some of them donated in-game money, the donations are so much that I got the Balance Top. So, that’s it.</p> <p>That’s how I got famous on a Minecraft server. Maybe next time I will write something other than this.</p>]]></content><author><name>Hans5958</name></author><category term="Article"/><category term="en"/><summary type="html"><![CDATA[Hello everyone. It’s been a while since my last post. Let me tell you my story of how I accidentally become famous on a Minecraft server.]]></summary></entry><entry><title type="html">Let’s talk about Minecraft</title><link href="https://hans5958.github.io/blog/2018/02/28/lets-talk-about-minecraft" rel="alternate" type="text/html" title="Let’s talk about Minecraft"/><published>2018-02-28T14:24:08+00:00</published><updated>2022-07-22T13:19:40+00:00</updated><id>https://hans5958.github.io/blog/2018/02/28/lets-talk-about-minecraft</id><content type="html" xml:base="https://hans5958.github.io/blog/2018/02/28/lets-talk-about-minecraft"><![CDATA[<p>Ah, Minecraft. Where all kids do unleash their creativity in a shape of pixelated blocks. Well, I played it too, even I’m not a child anymore. I do building sometimes, mainly redstone because I don’t have a talent for building such a large structure. Other times, I play on some online servers, mainly <a href="https://hypixel.net/">Hypixel</a> or <a href="https://hivemc.com/">HiveMC</a>. I prefer the ones that don’t involve PvP because I can’t fight and <a href="http://www.speedtest.net/result/7149921201">my internet is bad</a> (how sad, isn’t it?). Sometimes I go to some website for a new server to discover, but I mainly stick to that servers.</p> <p>So, in this post, I want to talk about it, I don’t know if somebody would read this long page of my post, but, well. Who cares? Let’s get started.</p> <h3 id="preamble">Preamble</h3> <p>So, as I explained there, Minecraft is a game where you can put blocks to build something, or even survive in a virtual world. We kill animals for food, we chop woods for tools, we build for our houses, or even switch to creative to build a castle or even <a href="https://www.youtube.com/watch?v=NJycdA8zw2I">a replica of something big</a>.</p> <p>We have seen a lot of people played the Minecraft. Time goes by, <a href="https://mojang.com/2014/09/yes-were-being-bought-by-microsoft/">Mojang bought by Microsoft</a>, <a href="https://www.polygon.com/2014/9/15/6151921/why-notch-left-mojang">Notch quit the developer team</a>, Minecraft has a sale over 100 million. That’s a lot, isn’t it? With more kids bought the game, and YouTube, this thing is growing so fast, right?</p> <p>Not only the sales but also the inside is growing. Just look at Google, you could see lots of user-generated contents. From the servers, maps, skins, or even mods. I bet we have seen that things (or the word Minecraft) once in our lives, from YouTube to just a news source.</p> <p>As long as a thing growing, problems would happen from time to time, from the players and from the game itself. The players, well, some of them suck, and some of them aren’t. The game problems come from bugs and some disappointing updates. I will primarily talk about the players later. Later then, we got the good things, like buildings that got into the news, famous YouTubers, world records, or other things that I couldn’t list.</p> <p>All of this made Minecraft a thing that what it is. It has a good side and also a bad side. Depending on which you looking, this is might be bad or good. Now, let’s talk about the bad things.</p> <h3 id="the-negative-side-of-minecraft">The Negative Side of Minecraft</h3> <p>Okay, we got a rundown of this thing that we could discuss here.</p> <p>First, let’s talk about YouTubers, just it’s negative side. Fine, fine, some of you think that they are the best and “you discuss it because jealously.” Some of you also tell me that it is just straight-up bad because of the content they uploaded (this is the thing that I thought when I saw Roblox YouTubers). As I said before, it’s how you see them.</p> <p>Some YouTubers could make good content from Minecraft, like build time-lapses, tutorials, update discussion, etc. But the point is I want to discuss the negative one. I think they are doing lots, lots, of videos. Some of them upload daily, which produce a little “boring” and too “cinematic”. Some of it makes news, other ones make roleplays that are super cringy that is too cringey that not even Discord admins would watch it. Some YouTubers also swore on their gameplay, which, you know, kids.</p> <p>Speaking of kids, let’s talk about kids. We know kids, they messed with a lot of games. Just look at it. Some of the games are “destroyed” because of the fandom. This is might be an exception for Minecraft, they have the same effect, which is the stereotype. You see, the fandom “destroys” the game by posting such weird fan art (it even could go mature), giving the game a bad reputation. Similar to Minecraft, the players, which most of them are kids, “destroy” the game by, well, their cringe actions or such. Everybody knows about this, I won’t explain much again.</p> <h3 id="the-positive-side-of-minecraft">The Positive Side of Minecraft</h3> <p>Okay, we are closing to the end. Let’s talk about this. We can see a lot of players actually do good gameplay (sometimes with cool mods or <a href="https://feed-the-beast.com/">mod</a> <a href="https://www.technicpack.net/">packs</a>). Also, some players could build a large structure with their creativity. Another one is some YouTubers who do tutorials for buildings and redstone. You could easily find them. Who knows.</p> <p>Another point that you should know is the good community, you could ask them, hang out on the servers or forums, or even play together to build something or be a famous player there. Who knows, again.</p> <h3 id="so-whats-the-deal">So, what’s the deal?</h3> <p>Basically, Minecraft is a good game. Most people doing it for good. Ironically, the negative side is the one that Minecraft is known for. It is a bad stereotype, actually. But, you know, those YouTubers who rant about Minecraft for the view count and made Minecraft even worst. Just so you know, Minecraft is a good game, but you may think it is bad because of your viewpoint.</p> <p>If you are new on the Minecraft world, just enjoy your life in a single player mode first. Don’t go to the multiplayer world as fast as possible. You may not ready for it. If you are experienced in the singleplayer mode, you will surely have a good experience on the multiplayer, but, be caution, you still make sure that you prepare those players whose screaming that their opponent cheating because they lose or those players who cheat on their fighting session because they want to be famous from their streaks (I’m not talking the ones who good at PvP, but those who cheat). I am serious.</p> <p>But, I’m pretty sure, those who are experienced on Minecraft should see Minecraft as a something that is useful than those guys who thinks the game is a piece of junk (because of the community).</p> <p>So, that’s all for this article. This is a result of a freewriting that I do. I just express what do I like. If you want this thing to appear, make sure to let me know.</p>]]></content><author><name>Hans5958</name></author><category term="Article"/><category term="en"/><summary type="html"><![CDATA[Ah, Minecraft. Where all kids do unleash their creativity in a shape of pixelated blocks. Well, I played it too, even I’m not a child anymore. I do building sometimes, mainly redstone because I don’t have a talent for building such a large structure. Other times, I play on some online servers, mainly Hypixel or HiveMC. I prefer the ones that don’t involve PvP because I can’t fight and my internet is bad (how sad, isn’t it?). Sometimes I go to some website for a new server to discover, but I mainly stick to that servers.]]></summary></entry><entry><title type="html">Hello world!</title><link href="https://hans5958.github.io/blog/2018/02/25/hello-world" rel="alternate" type="text/html" title="Hello world!"/><published>2018-02-25T13:53:04+00:00</published><updated>2022-07-22T13:19:40+00:00</updated><id>https://hans5958.github.io/blog/2018/02/25/hello-world</id><content type="html" xml:base="https://hans5958.github.io/blog/2018/02/25/hello-world"><![CDATA[<p>Hello, welcome to my new blog. Here, I will post my stuff or something. Right now, I want to start it with (maybe) posting my old stuff, and then I’ll add other stuff. Stay tuned!</p>]]></content><author><name>Hans5958</name></author><category term="Uncategorized"/><category term="en"/><summary type="html"><![CDATA[Hello, welcome to my new blog. Here, I will post my stuff or something. Right now, I want to start it with (maybe) posting my old stuff, and then I’ll add other stuff. Stay tuned!]]></summary></entry></feed>